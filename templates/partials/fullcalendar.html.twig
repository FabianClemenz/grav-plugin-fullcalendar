<div id='actMonth'></div>
<div id='calendar'></div>
<div id='legend'></div>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		var verbose = false;
		var defaultLocale = 'en';
		var cfgLocale = '{{ config.plugins.fullcalendar.locale }}';
		var LocaleCode = (cfgLocale !== null) ? cfgLocale : defaultLocale;
		var cfgFilestring = '{{icsfile}}'; //	from FullCalendarShortCode.php, can now (from v 0.1.2) hold multiple ics Files, comma separated
		if (verbose) console.log('cfgfilestring:', cfgFilestring);
		var cfgfiles = cfgFilestring.split(','); // split string into multiple ics files, if appropriate, see note above
		var len = cfgfiles.length;
		if (verbose) console.log('cfgfiles[]:', cfgfiles);
		var BgColstring = '{{ config.plugins.fullcalendar.colors }}'; 	
		if (verbose) console.log('BgColstring:', BgColstring);
		var colors = BgColstring.split(',');
		var ncolors = colors.length;
		if (ncolors < len)	{	// populate colors with default color from fullcalendar.css
			colors = ['#3a87ad'];
			for (i=0; i<(len);i++)
				colors.push('#3a87ad');
		}
		if (verbose) console.log('colors[]:', colors);
		var showlegend = '{{ config.plugins.fullcalendar.showlegend }}';
		if (verbose)	console.log('showlegend:', showlegend);
		// page is now ready, initialize the calendar...
		var calendarEl = document.getElementById('calendar');
		var calendar = new FullCalendar.Calendar(calendarEl, {
			plugins: [ 'interaction', 'dayGrid', 'rrule' ],
			locale: LocaleCode,
			header: {
				left: 'prevYear,nextYear',
				center: 'title',
			},
			navLinks: false, // can click day/week names to navigate views
			editable: true,
			eventLimit: false, // allow "more" link when too many events
			fixedWeekCount: false,
			/*	this seems to work for test purposes:
			events: [
				{
					title: 'rrule event',
					rrule: {
						dtstart: '2019-08-09T13:00:00',
						byweekday: [Mo,We],
						freq: 'weekly'
					},
					duration: '02:00'
				}
			],
			*/
			events: function(info, successCallback, failureCallback) {
				var allevents = [];
				cfgfiles.forEach(function(value, index) {
					cfgFile = value;
					if (verbose) console.log('yaml CFG File:' + cfgFile);
					// allow remote ics files, full URL required
					if (cfgFile.startsWith("https://") || cfgFile.startsWith("http://")) {
						calendarUrl = cfgFile;
					}   else    {
						calendarUrl = getAbsolutePath() + 'user/data/calendars/' + cfgFile;
					}
					if (verbose) console.log('Calendar URL:' + calendarUrl);
					var events = [];
					var do_callback = false; // muss zwingend hier hin, nicht ausserhalb der forEach schleife !!
					if (index == (len - 1)) {
						do_callback = true;
					}
					if (verbose) console.log('index,do_callback:', index, do_callback);
					jQuery.get(calendarUrl, function(data) {
						var iCalendarData = [];
						var lines = data.split("\n");
						for (var i = 0, len = lines.length; i < len; i++) {
							if (jQuery.trim(lines[i]).length > 0) {
								//if (verbose) console.log(lines[i]);
								iCalendarData.push(jQuery.trim(lines[i]));
							}
						}
						iCalendarData = iCalendarData.join("\r\n");
						var jcalData = ICAL.parse(iCalendarData);
						var comp = new ICAL.Component(jcalData);
						var eventComps = comp.getAllSubcomponents("vevent");
						//	map them to FullCalendar events Objects
						events = jQuery.map(eventComps, function(item) {
							var fcevents = {};
							var entry = item.getFirstPropertyValue("summary");
							if (entry !== null)	fcevents["title"] = entry;
							var entry = item.getFirstPropertyValue("location");
							if (entry !== null)	fcevents["location"] = entry;
							var entry = item.getFirstPropertyValue("url");
							if (entry !== null)	fcevents["url"] = entry;
							var entry = item.getFirstPropertyValue("dtstart");
							if (entry !== null)	fcevents["start"] = entry.toJSDate();
							var entry = item.getFirstPropertyValue("dtend");
							if (entry !== null)	fcevents["end"] = entry.toJSDate();
							
							// not used options go here
							
							var rrules = item.getFirstPropertyValue("rrule");
							var fcrrules = {};	// extra object for rrules
							if (rrules !== null)	{
								if (verbose)	console.log('rrules:', rrules);	
								var parts = rrules["parts"];
								if (verbose)	console.log('parts:', parts);
								var byday = parts["BYDAY"];
								if (Array.isArray(byday))	{byday = parts["BYDAY"];}	else	{byday = null;}
								if (verbose)	console.log('byday:', byday);
								var bymonth = parts["BYMONTH"];
								if (Array.isArray(bymonth))	{bymonth = parts["BYMONTH"];}	else	{bymonth = null;}
								if (verbose)	console.log('bymonth:', bymonth);
								fcrrules["dtstart"] = fcevents["start"];
								if (rrules.freq !== null)	{ fcrrules["freq"] = rrules.freq;}
								if (byday !== null) { fcrrules["byweekday"] = byday;}
								if (bymonth !== null) { fcrrules["bymonth"] = bymonth;}
								if (rrules.interval != null) { fcrrules["interval"] = rrules.interval;}
								if (rrules.count != null) { fcrrules["count"] = rrules.count;}
								if (rrules.wkst != null) { fcrrules["wkst"] = rrules.wkst;}
								if (rrules.until != null) { fcrrules["until"] = rrules.until.toJSDate();}
								fcevents["rrule"] = fcrrules;
								if (verbose)	console.log('fcrrules:', fcrrules);
							}
							fcevents["backgroundColor"] = colors[index];
							if (verbose)	console.log('fcevents:', fcevents);
							if (item.getFirstPropertyValue("class") == "PRIVATE") {
								return null;
							} else {
								return fcevents;
							} 
						})
						jQuery.merge(allevents, events);
						if (verbose) console.log('index,do_callback:', index, do_callback);
						if (verbose) console.log('events:', events);
						if (do_callback) {
							successCallback(allevents);	// wichtig !!
							if (verbose) console.log('allevents:', allevents);
						}
					}, 
					'text');
				})
			}
		});
		calendar.render();
		// show legend, if enabled
		if (showlegend) {
			// Add the contents of cfgfiles to #legend:
			document.getElementById('legend').appendChild(makeUL(cfgfiles, colors));
		}
	})
	
	function makeUL(array, colors) {
		// Create the list element:
		var list = document.createElement('ul');
		// assign css class
		list.classList.add('cal_legend');
		for (var i = 0; i < array.length; i++) {
			// Create the list item:
			var item = document.createElement('li');
			
			// Set its contents:
			item.appendChild(document.createTextNode(array[i]));
			item.style.color = colors[i];
			
			// Add it to the list:
			list.appendChild(item);
		}
		// Finally, return the constructed list:
		return list;
	}

	function getAbsolutePath() { // see https://www.sitepoint.com/jquery-current-page-url/
		var loc = window.location;
		var pathName = loc.pathname.substring(0, loc.pathname.lastIndexOf('/') + 1);
		return loc.href.substring(0, loc.href.length - ((loc.pathname + loc.search + loc.hash).length - pathName.length));
	}
	
</script>
